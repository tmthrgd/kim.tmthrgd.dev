// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project templates.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 6, 6, 7, 58, 11, 389644409, time.UTC),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2019, 6, 6, 8, 9, 43, 539983197, time.UTC),
			uncompressedSize: 824,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xdf\x6e\x13\x3d\x10\xc5\xef\xf3\x14\xfe\xf6\xe2\xbb\x81\xd8\x49\xa0\xb4\xc0\x7a\x51\x81\xd2\x52\x54\xb5\x24\x6d\x69\x2f\xa7\xde\xc9\xae\x13\xff\x59\x79\x26\x49\x37\x51\x24\xde\x81\x37\xe4\x49\xd0\xb6\x2a\x88\x9b\x4a\x20\xae\xac\x73\xac\x39\xf3\x1b\xe9\xe4\xff\x95\xd1\x70\xdb\xa0\xa8\xd9\xbb\xa2\x97\x77\x8f\x70\x10\x2a\x8d\xa1\xe8\xe5\x1e\x19\x84\xa9\x21\x11\xb2\x5e\xf0\xb4\xbf\xf7\x60\x06\xf0\xa8\x97\x16\x57\x4d\x4c\x2c\x4c\x0c\x8c\x81\x75\xb6\xb2\x25\xd7\xba\xc4\xa5\x35\xd8\xbf\x13\x4f\x6d\xb0\x6c\xc1\xf5\xc9\x80\x43\x3d\xcc\x8a\x5e\xce\x96\x1d\x16\x9b\x8d\x9c\x30\xf0\x82\xde\xc5\x12\xb7\x5b\xb1\xd9\xd4\xcc\xcd\xbd\x75\x8e\xb7\x2c\x7e\xff\xfe\xfe\xf5\x9b\x98\x5b\x2f\xd9\x73\x9d\xaa\x52\x96\xb8\xcc\xd5\x7d\x52\x2f\x77\x36\xcc\x45\x42\xa7\x89\x5b\x87\x54\x23\xb2\xa8\x13\x4e\x75\x17\x49\xaf\x94\x32\x65\x98\x91\x34\x2e\x2e\xca\xa9\x83\x84\xd2\x44\xaf\x60\x06\xb7\xca\xd9\x1b\x52\x21\x26\x0f\xce\xae\x51\xed\xc9\x81\x1c\xfe\xd2\xd2\xdb\x20\x0d\x91\xb0\x81\xb1\x4a\x96\x5b\x9d\x51\x0d\xa3\x9d\x17\x7d\xb7\xb7\x73\xea\xcf\x4e\x67\x4b\xeb\xd4\xe4\x74\x79\xc9\xcf\x8e\xc2\x64\x32\x5b\x7f\x18\x9e\x5f\x9c\xb4\xe7\x2f\xf1\x72\x60\x46\x6f\xd7\x07\x87\xeb\x0b\x9d\x09\x93\x22\x51\x4c\xb6\xb2\x41\x43\x88\xa1\xf5\x71\x41\xff\x80\x9c\xe6\xe8\x90\x63\x50\x23\x39\x90\xcf\x7f\xca\x47\xb8\x47\xd7\x9f\xc7\xc7\x27\x57\xef\x77\x9b\x8f\xfb\x67\x47\xf6\x2a\x0d\xe8\xc9\xd2\x8d\xbf\xec\xef\x1e\x5e\x1f\x1f\x7c\x1a\xec\x8f\x03\xed\xce\x47\x74\x73\x74\xfd\x37\xdc\xd9\x03\xf8\x34\x06\x26\x59\xc5\x58\x39\x84\xc6\xd2\x1d\xb8\x21\x7a\x33\x05\x6f\x5d\xab\xc7\xe0\x70\x05\xed\xff\xe0\x9b\xd7\xa5\xa5\xc6\x41\xab\x69\x05\x4d\xf6\x58\xfa\x66\x03\x44\xc8\x67\xc0\xb5\xc8\x14\xa6\x14\x53\x77\x66\xb6\xdd\x76\xcd\x04\x1b\x84\x71\x40\xa4\xbb\x46\x82\x0d\x98\xba\x52\x0f\xff\xb0\x6b\xb9\xaa\x87\x45\x2f\x6f\xba\xb1\x13\x24\x82\xea\xce\x6c\x8a\x5e\xae\xba\x1d\xc5\x8f\x00\x00\x00\xff\xff\xd5\xe7\x05\x4f\x38\x03\x00\x00"),
		},
		"/post.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "post.tmpl",
			modTime:          time.Date(2019, 6, 6, 13, 53, 47, 330087395, time.UTC),
			uncompressedSize: 790,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcb\x6e\xdb\x3c\x10\x85\xf7\x7a\x0a\xfe\x5a\xfc\x68\x81\x5a\x4c\x52\xa4\x48\x53\x51\x8b\xde\xdd\x5b\x8c\xda\xc9\x9e\xa6\xc6\x12\x1d\x92\x23\x90\x23\x3b\x32\xa1\x6d\xf7\x7d\x9e\xbe\x4d\x9f\xa4\xa0\x5d\xa7\x68\x81\x76\x23\xe9\xcc\x0c\x3e\x9d\x99\x53\xfe\x57\xa3\xa2\xa1\x03\xd6\x92\x35\x55\x56\xa6\x17\x33\xd2\x35\x02\x5c\x95\x95\x16\x48\x32\xd5\x4a\x1f\x80\x44\x4f\xab\xc9\xc5\xb1\xe8\xa4\x05\xb1\xd1\xb0\xed\xd0\x13\x53\xe8\x08\x1c\x89\x7c\xab\x6b\x6a\x45\x0d\x1b\xad\x60\xb2\x17\x8f\xb4\xd3\xa4\xa5\x99\x04\x25\x0d\x88\xd3\xbc\xca\x4a\xd2\x64\xa0\x7a\xaf\x2d\x7b\x87\xae\x99\xf4\x8e\xc5\x58\xbc\x90\x1d\x69\x74\xe3\x58\xf2\x43\x3f\x2b\x8d\x76\xb7\xcc\x83\x11\x81\x06\x03\xa1\x05\x20\xd6\x7a\x58\x89\x96\xa8\x0b\x97\x9c\xab\xda\xad\x43\xa1\x0c\xf6\xf5\xca\x48\x0f\x85\x42\xcb\xe5\x5a\xde\x71\xa3\x97\x81\x3b\xf4\x56\x1a\xbd\x03\x7e\x51\x9c\x14\xa7\xbf\x74\x61\xb5\x2b\x54\x08\x4c\x3b\x82\xc6\x6b\x1a\x44\x1e\x5a\x79\x76\xfe\x64\x62\x2e\xce\xaf\xec\xec\x6a\xbd\xd1\x86\xcf\xaf\x36\x37\xf4\xf8\xad\x9b\xcf\xd7\xbb\xd7\xa7\x8b\xeb\x8f\xc3\xe2\x29\xdc\x9c\xa8\xb3\xe7\xbb\x57\x6f\x76\xd7\x22\x67\xca\x63\x08\xe8\x75\xa3\x9d\x90\x0e\xdd\x60\xb1\x0f\xff\x72\x1e\xa3\x0c\x01\x68\x26\xa9\x65\x39\xef\x30\x50\xf2\x91\x8f\x63\x95\x95\xfb\x59\xe6\xd0\x29\x10\x79\xba\xc8\x7c\xf6\x29\x89\x71\xcc\xab\x25\xd6\x43\x5c\x4a\x75\xdb\x78\xec\x5d\x3d\xd1\x56\x36\x70\xd9\x7b\xf3\x20\x4d\x4e\x93\x1a\xc7\xfc\xe1\x58\xf2\x3d\x25\x45\x09\xb2\x06\x5f\x65\x65\x57\x95\xf2\xf0\xf3\x9c\xc7\x58\xcc\x30\xd0\xf4\x65\x62\xfe\x3d\x00\x59\x95\xbc\xab\xb2\x92\xdf\x43\x56\x88\xf4\x07\x8d\xb3\x7d\x4e\x22\x77\xb0\x65\x7b\x3f\x79\x15\xa3\x5e\xb1\x62\x1a\xa6\xae\x86\xbb\x71\xfc\xfe\xe5\x5b\x8c\x60\x02\xa4\xcf\xaf\x31\x82\xab\x0f\xf8\xff\xdd\x32\x74\xcf\x0e\x4f\x2b\x6b\x60\xcb\x81\x1d\xb9\xc7\x70\x09\x2d\xb5\xe8\xb1\x41\xac\x8b\xfe\x70\x4e\xd9\xa7\x52\xb5\x40\xcb\x16\xc7\x5e\xe2\xb1\xad\xa6\xf6\x60\x22\xb0\x95\x47\x7b\x4f\x4b\xe7\x99\x63\xef\x15\x5c\x7f\xfe\x90\xb6\xbe\xd7\x8b\xe4\xfe\xb7\x6d\x7f\x2e\xf9\x23\x00\x00\xff\xff\x46\xab\xc1\x6c\x16\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/error.tmpl"].(os.FileInfo),
		fs["/post.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
